{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n\n  var AccessorNode = /*#__PURE__*/function (_Node) {\n    _inherits(AccessorNode, _Node);\n\n    var _super = _createSuper(AccessorNode);\n\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    function AccessorNode(object, index) {\n      var _this;\n\n      _classCallCheck(this, AccessorNode);\n\n      _this = _super.call(this);\n\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n\n      _this.object = object;\n      _this.index = index;\n      return _this;\n    } // readonly property name\n\n\n    _createClass(AccessorNode, [{\n      key: \"name\",\n      get: function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAccessorNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n\n        var evalIndex = this.index._compile(math, argNames);\n\n        if (this.index.isObjectProperty()) {\n          var prop = this.index.getObjectProperty();\n          return function evalAccessorNode(scope, args, context) {\n            // get a property from an object evaluated using the scope.\n            return getSafeProperty(evalObject(scope, args, context), prop);\n          };\n        } else {\n          return function evalAccessorNode(scope, args, context) {\n            var object = evalObject(scope, args, context); // we pass just object here instead of context:\n\n            var index = evalIndex(scope, args, object);\n            return access(object, index);\n          };\n        }\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n        callback(this.index, 'index', this);\n      }\n      /**\n       * Create a new AccessorNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AccessorNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AccessorNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AccessorNode(this.object, this.index);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n\n        if (needParenthesis(this.object)) {\n          object = '(' + object + ')';\n        }\n\n        return object + this.index.toString(options);\n      }\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value: function toHTML(options) {\n        var object = this.object.toHTML(options);\n\n        if (needParenthesis(this.object)) {\n          object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return object + this.index.toHTML(options);\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n\n        if (needParenthesis(this.object)) {\n          object = '\\\\left(\\' + object + \\'\\\\right)';\n        }\n\n        return object + this.index.toTex(options);\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index\n        };\n      }\n      /**\n       * Instantiate an AccessorNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n       *     where mathjs is optional\n       * @returns {AccessorNode}\n       */\n\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AccessorNode(json.object, json.index);\n      }\n    }]);\n\n    return AccessorNode;\n  }(Node);\n\n  _defineProperty(AccessorNode, \"name\", name);\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isNode","isObjectNode","isParenthesisNode","isSymbolNode","getSafeProperty","factory","accessFactory","name","dependencies","createAccessorNode","_ref","subset","Node","access","needParenthesis","node","AccessorNode","object","index","TypeError","isObjectProperty","getObjectProperty","math","argNames","evalObject","_compile","evalIndex","prop","evalAccessorNode","scope","args","context","callback","_ifNode","options","toString","toHTML","toTex","mathjs","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  /**\n   * Are parenthesis needed?\n   * @private\n   */\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n\n  class AccessorNode extends Node {\n    /**\n     * @constructor AccessorNode\n     * @extends {Node}\n     * Access an object property or get a matrix subset\n     *\n     * @param {Node} object                 The object from which to retrieve\n     *                                      a property or subset.\n     * @param {IndexNode} index             IndexNode containing ranges\n     */\n    constructor(object, index) {\n      super();\n\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n\n      this.object = object;\n      this.index = index;\n    } // readonly property name\n\n\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isAccessorNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n\n      var evalIndex = this.index._compile(math, argNames);\n\n      if (this.index.isObjectProperty()) {\n        var prop = this.index.getObjectProperty();\n        return function evalAccessorNode(scope, args, context) {\n          // get a property from an object evaluated using the scope.\n          return getSafeProperty(evalObject(scope, args, context), prop);\n        };\n      } else {\n        return function evalAccessorNode(scope, args, context) {\n          var object = evalObject(scope, args, context); // we pass just object here instead of context:\n\n          var index = evalIndex(scope, args, object);\n          return access(object, index);\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      callback(this.index, 'index', this);\n    }\n    /**\n     * Create a new AccessorNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AccessorNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AccessorNode}\n     */\n\n\n    clone() {\n      return new AccessorNode(this.object, this.index);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    _toString(options) {\n      var object = this.object.toString(options);\n\n      if (needParenthesis(this.object)) {\n        object = '(' + object + ')';\n      }\n\n      return object + this.index.toString(options);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n\n      if (needParenthesis(this.object)) {\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return object + this.index.toHTML(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    _toTex(options) {\n      var object = this.object.toTex(options);\n\n      if (needParenthesis(this.object)) {\n        object = '\\\\left(\\' + object + \\'\\\\right)';\n      }\n\n      return object + this.index.toTex(options);\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index\n      };\n    }\n    /**\n     * Instantiate an AccessorNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\n     *     where mathjs is optional\n     * @returns {AccessorNode}\n     */\n\n\n    static fromJSON(json) {\n      return new AccessorNode(json.object, json.index);\n    }\n\n  }\n\n  _defineProperty(AccessorNode, \"name\", name);\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}