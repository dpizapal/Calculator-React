{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      _BigNumber = _ref.BigNumber;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: function BigNumber(x) {\n      return _bigNthRoot(x, new _BigNumber(2));\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', function (selfDn) {\n      return function (x) {\n        return selfDn(matrix(x), 2).valueOf();\n      };\n    }),\n    DenseMatrix: typed.referTo('DenseMatrix,number', function (selfDn) {\n      return function (x) {\n        return selfDn(x, 2);\n      };\n    }),\n    SparseMatrix: typed.referTo('SparseMatrix,number', function (selfSn) {\n      return function (x) {\n        return selfSn(x, 2);\n      };\n    }),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // sparse + sparse\n          return matAlgo06xS0S0(x, y, self);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // dense + sparse\n          return matAlgo01xDSid(x, y, self, false);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', function (selfDS) {\n      return function (x, y) {\n        return selfDS(matrix(x), y);\n      };\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // density must be one (no zeros in matrix)\n        if (y.density() === 1) {\n          // sparse - scalar\n          return matAlgo11xS0s(y, x, self, true);\n        } else {\n          // throw exception\n          throw new Error('Root must be non-zero');\n        }\n      };\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], function (_ref2) {\n  var typed = _ref2.typed;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo02xDS0","createMatAlgo06xS0S0","createMatAlgo11xS0s","createMatrixAlgorithmSuite","nthRootNumber","name","dependencies","createNthRoot","_ref","typed","matrix","equalScalar","_BigNumber","BigNumber","matAlgo01xDSid","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matrixAlgorithmSuite","complexErr","Error","number","x","_bigNthRoot","Complex","Array","referTo","selfDn","valueOf","DenseMatrix","SparseMatrix","selfSn","referToSelf","self","y","density","selfDS","scalar","SD","Ss","sS","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","createNthRootNumber","_ref2"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}