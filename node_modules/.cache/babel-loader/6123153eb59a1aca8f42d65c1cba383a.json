{"ast":null,"code":"import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      not = _ref.not;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed: typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return self(x.value || 0, y.value || 0);\n      };\n    }),\n    'SparseMatrix, any': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (not(y)) {\n          // return zero matrix\n          return zeros(x.size(), x.storage());\n        }\n\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, any': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (not(y)) {\n          // return zero matrix\n          return zeros(x.size(), x.storage());\n        }\n\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'any, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (not(x)) {\n          // return zero matrix\n          return zeros(x.size(), x.storage());\n        }\n\n        return matAlgo11xS0s(y, x, self, true);\n      };\n    }),\n    'any, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar\n        if (not(x)) {\n          // return zero matrix\n          return zeros(x.size(), x.storage());\n        }\n\n        return matAlgo14xDs(y, x, self, true);\n      };\n    }),\n    'Array, any': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return self(matrix(x), y).valueOf();\n      };\n    }),\n    'any, Array': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return self(x, matrix(y)).valueOf();\n      };\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});","map":{"version":3,"names":["createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo06xS0S0","factory","createMatrixAlgorithmSuite","andNumber","name","dependencies","createAnd","_ref","typed","matrix","equalScalar","zeros","not","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","size","storage","valueOf","SS","DS"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/function/logical/and.js"],"sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}