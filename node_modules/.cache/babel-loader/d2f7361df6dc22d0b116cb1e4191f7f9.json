{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var ResultSet = _ref.ResultSet,\n      Node = _ref.Node;\n\n  var BlockNode = /*#__PURE__*/function (_Node) {\n    _inherits(BlockNode, _Node);\n\n    var _super = _createSuper(BlockNode);\n\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    function BlockNode(blocks) {\n      var _this;\n\n      _classCallCheck(this, BlockNode);\n\n      _this = _super.call(this); // validate input, copy blocks\n\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      _this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n\n        return {\n          node: node,\n          visible: visible\n        };\n      });\n      return _this;\n    }\n\n    _createClass(BlockNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isBlockNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalBlocks = map(this.blocks, function (block) {\n          return {\n            evaluate: block.node._compile(math, argNames),\n            visible: block.visible\n          };\n        });\n        return function evalBlockNodes(scope, args, context) {\n          var results = [];\n          forEach(evalBlocks, function evalBlockNode(block) {\n            var result = block.evaluate(scope, args, context);\n\n            if (block.visible) {\n              results.push(result);\n            }\n          });\n          return new ResultSet(results);\n        };\n      }\n      /**\n       * Execute a callback for each of the child blocks of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.blocks.length; i++) {\n          callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n        }\n      }\n      /**\n       * Create a new BlockNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {BlockNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var blocks = [];\n\n        for (var i = 0; i < this.blocks.length; i++) {\n          var block = this.blocks[i];\n\n          var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n          blocks[i] = {\n            node: node,\n            visible: block.visible\n          };\n        }\n\n        return new BlockNode(blocks);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {BlockNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var blocks = this.blocks.map(function (block) {\n          return {\n            node: block.node,\n            visible: block.visible\n          };\n        });\n        return new BlockNode(blocks);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        return this.blocks.map(function (param) {\n          return param.node.toString(options) + (param.visible ? '' : ';');\n        }).join('\\n');\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          blocks: this.blocks\n        };\n      }\n      /**\n       * Instantiate an BlockNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n       *     where mathjs is optional\n       * @returns {BlockNode}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toHTML(options) {\n        return this.blocks.map(function (param) {\n          return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n        }).join('<span class=\"math-separator\"><br /></span>');\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        return this.blocks.map(function (param) {\n          return param.node.toTex(options) + (param.visible ? '' : ';');\n        }).join('\\\\;\\\\;\\n');\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new BlockNode(json.blocks);\n      }\n    }]);\n\n    return BlockNode;\n  }(Node);\n\n  _defineProperty(BlockNode, \"name\", name);\n\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","forEach","map","factory","name","dependencies","createBlockNode","_ref","ResultSet","Node","BlockNode","blocks","Array","isArray","Error","block","node","visible","undefined","TypeError","math","argNames","evalBlocks","evaluate","_compile","evalBlockNodes","scope","args","context","results","evalBlockNode","result","push","callback","i","length","_ifNode","options","param","toString","join","mathjs","toHTML","toTex","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/BlockNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n\n  class BlockNode extends Node {\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    constructor(blocks) {\n      super(); // validate input, copy blocks\n\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n\n        return {\n          node,\n          visible\n        };\n      });\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isBlockNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalBlocks = map(this.blocks, function (block) {\n        return {\n          evaluate: block.node._compile(math, argNames),\n          visible: block.visible\n        };\n      });\n      return function evalBlockNodes(scope, args, context) {\n        var results = [];\n        forEach(evalBlocks, function evalBlockNode(block) {\n          var result = block.evaluate(scope, args, context);\n\n          if (block.visible) {\n            results.push(result);\n          }\n        });\n        return new ResultSet(results);\n      };\n    }\n    /**\n     * Execute a callback for each of the child blocks of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      for (var i = 0; i < this.blocks.length; i++) {\n        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n      }\n    }\n    /**\n     * Create a new BlockNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {BlockNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var blocks = [];\n\n      for (var i = 0; i < this.blocks.length; i++) {\n        var block = this.blocks[i];\n\n        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n        blocks[i] = {\n          node,\n          visible: block.visible\n        };\n      }\n\n      return new BlockNode(blocks);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {BlockNode}\n     */\n\n\n    clone() {\n      var blocks = this.blocks.map(function (block) {\n        return {\n          node: block.node,\n          visible: block.visible\n        };\n      });\n      return new BlockNode(blocks);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toString(options) + (param.visible ? '' : ';');\n      }).join('\\n');\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        blocks: this.blocks\n      };\n    }\n    /**\n     * Instantiate an BlockNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n     *     where mathjs is optional\n     * @returns {BlockNode}\n     */\n\n\n    static fromJSON(json) {\n      return new BlockNode(json.blocks);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n      }).join('<span class=\"math-separator\"><br /></span>');\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toTex(options) + (param.visible ? '' : ';');\n      }).join('\\\\;\\\\;\\n');\n    }\n\n  }\n\n  _defineProperty(BlockNode, \"name\", name);\n\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}