{"ast":null,"code":"import _toConsumableArray from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { map } from '../../utils/array.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { isArray, isConstantNode, isMatrix, isNode, isString, typeOf } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nvar name = 'IndexNode';\nvar dependencies = ['Node', 'size'];\nexport var createIndexNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node,\n      size = _ref.size;\n\n  var IndexNode = /*#__PURE__*/function (_Node) {\n    _inherits(IndexNode, _Node);\n\n    var _super = _createSuper(IndexNode);\n\n    /**\n     * @constructor IndexNode\n     * @extends Node\n     *\n     * Describes a subset of a matrix or an object property.\n     * Cannot be used on its own, needs to be used within an AccessorNode or\n     * AssignmentNode.\n     *\n     * @param {Node[]} dimensions\n     * @param {boolean} [dotNotation=false]\n     *     Optional property describing whether this index was written using dot\n     *     notation like `a.b`, or using bracket notation like `a[\"b\"]`\n     *     (which is the default). This property is used for string conversion.\n     */\n    function IndexNode(dimensions, dotNotation) {\n      var _this;\n\n      _classCallCheck(this, IndexNode);\n\n      _this = _super.call(this);\n      _this.dimensions = dimensions;\n      _this.dotNotation = dotNotation || false; // validate input\n\n      if (!Array.isArray(dimensions) || !dimensions.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n      }\n\n      if (_this.dotNotation && !_this.isObjectProperty()) {\n        throw new Error('dotNotation only applicable for object properties');\n      }\n\n      return _this;\n    }\n\n    _createClass(IndexNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isIndexNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        // TODO: implement support for bignumber (currently bignumbers are silently\n        //       reduced to numbers when changing the value to zero-based)\n        // TODO: Optimization: when the range values are ConstantNodes,\n        //       we can beforehand resolve the zero-based value\n        // optimization for a simple object property\n        var evalDimensions = map(this.dimensions, function (dimension, i) {\n          var needsEnd = dimension.filter(function (node) {\n            return node.isSymbolNode && node.name === 'end';\n          }).length > 0;\n\n          if (needsEnd) {\n            // SymbolNode 'end' is used inside the index,\n            // like in `A[end]` or `A[end - 2]`\n            var childArgNames = Object.create(argNames);\n            childArgNames.end = true;\n\n            var _evalDimension = dimension._compile(math, childArgNames);\n\n            return function evalDimension(scope, args, context) {\n              if (!isMatrix(context) && !isArray(context) && !isString(context)) {\n                throw new TypeError('Cannot resolve \"end\": ' + 'context must be a Matrix, Array, or string but is ' + typeOf(context));\n              }\n\n              var s = size(context).valueOf();\n              var childArgs = Object.create(args);\n              childArgs.end = s[i];\n              return _evalDimension(scope, childArgs, context);\n            };\n          } else {\n            // SymbolNode `end` not used\n            return dimension._compile(math, argNames);\n          }\n        });\n        var index = getSafeProperty(math, 'index');\n        return function evalIndexNode(scope, args, context) {\n          var dimensions = map(evalDimensions, function (evalDimension) {\n            return evalDimension(scope, args, context);\n          });\n          return index.apply(void 0, _toConsumableArray(dimensions));\n        };\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.dimensions.length; i++) {\n          callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n        }\n      }\n      /**\n       * Create a new IndexNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {IndexNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var dimensions = [];\n\n        for (var i = 0; i < this.dimensions.length; i++) {\n          dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n        }\n\n        return new IndexNode(dimensions, this.dotNotation);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {IndexNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new IndexNode(this.dimensions.slice(0), this.dotNotation);\n      }\n      /**\n       * Test whether this IndexNode contains a single property name\n       * @return {boolean}\n       */\n\n    }, {\n      key: \"isObjectProperty\",\n      value: function isObjectProperty() {\n        return this.dimensions.length === 1 && isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';\n      }\n      /**\n       * Returns the property name if IndexNode contains a property.\n       * If not, returns null.\n       * @return {string | null}\n       */\n\n    }, {\n      key: \"getObjectProperty\",\n      value: function getObjectProperty() {\n        return this.isObjectProperty() ? this.dimensions[0].value : null;\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        // format the parameters like \"[1, 0:5]\"\n        return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          dimensions: this.dimensions,\n          dotNotation: this.dotNotation\n        };\n      }\n      /**\n       * Instantiate an IndexNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"IndexNode\", dimensions: [...], dotNotation: false}`,\n       *     where mathjs is optional\n       * @returns {IndexNode}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      function toHTML(options) {\n        // format the parameters like \"[1, 0:5]\"\n        var dimensions = [];\n\n        for (var i = 0; i < this.dimensions.length; i++) {\n          dimensions[i] = this.dimensions[i].toHTML();\n        }\n\n        if (this.dotNotation) {\n          return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';\n        } else {\n          return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n        }\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var dimensions = this.dimensions.map(function (range) {\n          return range.toTex(options);\n        });\n        return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new IndexNode(json.dimensions, json.dotNotation);\n      }\n    }]);\n\n    return IndexNode;\n  }(Node);\n\n  _defineProperty(IndexNode, \"name\", name);\n\n  return IndexNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","map","getSafeProperty","factory","isArray","isConstantNode","isMatrix","isNode","isString","typeOf","escape","name","dependencies","createIndexNode","_ref","Node","size","IndexNode","dimensions","dotNotation","Array","every","TypeError","isObjectProperty","Error","math","argNames","evalDimensions","dimension","i","needsEnd","filter","node","isSymbolNode","length","childArgNames","Object","create","end","_evalDimension","_compile","evalDimension","scope","args","context","s","valueOf","childArgs","index","evalIndexNode","callback","_ifNode","slice","value","options","getObjectProperty","join","mathjs","toHTML","range","toTex","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/IndexNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { map } from '../../utils/array.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { isArray, isConstantNode, isMatrix, isNode, isString, typeOf } from '../../utils/is.js';\nimport { escape } from '../../utils/string.js';\nvar name = 'IndexNode';\nvar dependencies = ['Node', 'size'];\nexport var createIndexNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node,\n    size\n  } = _ref;\n\n  class IndexNode extends Node {\n    /**\n     * @constructor IndexNode\n     * @extends Node\n     *\n     * Describes a subset of a matrix or an object property.\n     * Cannot be used on its own, needs to be used within an AccessorNode or\n     * AssignmentNode.\n     *\n     * @param {Node[]} dimensions\n     * @param {boolean} [dotNotation=false]\n     *     Optional property describing whether this index was written using dot\n     *     notation like `a.b`, or using bracket notation like `a[\"b\"]`\n     *     (which is the default). This property is used for string conversion.\n     */\n    constructor(dimensions, dotNotation) {\n      super();\n      this.dimensions = dimensions;\n      this.dotNotation = dotNotation || false; // validate input\n\n      if (!Array.isArray(dimensions) || !dimensions.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');\n      }\n\n      if (this.dotNotation && !this.isObjectProperty()) {\n        throw new Error('dotNotation only applicable for object properties');\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isIndexNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      // TODO: implement support for bignumber (currently bignumbers are silently\n      //       reduced to numbers when changing the value to zero-based)\n      // TODO: Optimization: when the range values are ConstantNodes,\n      //       we can beforehand resolve the zero-based value\n      // optimization for a simple object property\n      var evalDimensions = map(this.dimensions, function (dimension, i) {\n        var needsEnd = dimension.filter(node => node.isSymbolNode && node.name === 'end').length > 0;\n\n        if (needsEnd) {\n          // SymbolNode 'end' is used inside the index,\n          // like in `A[end]` or `A[end - 2]`\n          var childArgNames = Object.create(argNames);\n          childArgNames.end = true;\n\n          var _evalDimension = dimension._compile(math, childArgNames);\n\n          return function evalDimension(scope, args, context) {\n            if (!isMatrix(context) && !isArray(context) && !isString(context)) {\n              throw new TypeError('Cannot resolve \"end\": ' + 'context must be a Matrix, Array, or string but is ' + typeOf(context));\n            }\n\n            var s = size(context).valueOf();\n            var childArgs = Object.create(args);\n            childArgs.end = s[i];\n            return _evalDimension(scope, childArgs, context);\n          };\n        } else {\n          // SymbolNode `end` not used\n          return dimension._compile(math, argNames);\n        }\n      });\n      var index = getSafeProperty(math, 'index');\n      return function evalIndexNode(scope, args, context) {\n        var dimensions = map(evalDimensions, function (evalDimension) {\n          return evalDimension(scope, args, context);\n        });\n        return index(...dimensions);\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      for (var i = 0; i < this.dimensions.length; i++) {\n        callback(this.dimensions[i], 'dimensions[' + i + ']', this);\n      }\n    }\n    /**\n     * Create a new IndexNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {IndexNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var dimensions = [];\n\n      for (var i = 0; i < this.dimensions.length; i++) {\n        dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));\n      }\n\n      return new IndexNode(dimensions, this.dotNotation);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {IndexNode}\n     */\n\n\n    clone() {\n      return new IndexNode(this.dimensions.slice(0), this.dotNotation);\n    }\n    /**\n     * Test whether this IndexNode contains a single property name\n     * @return {boolean}\n     */\n\n\n    isObjectProperty() {\n      return this.dimensions.length === 1 && isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';\n    }\n    /**\n     * Returns the property name if IndexNode contains a property.\n     * If not, returns null.\n     * @return {string | null}\n     */\n\n\n    getObjectProperty() {\n      return this.isObjectProperty() ? this.dimensions[0].value : null;\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      // format the parameters like \"[1, 0:5]\"\n      return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        dimensions: this.dimensions,\n        dotNotation: this.dotNotation\n      };\n    }\n    /**\n     * Instantiate an IndexNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"IndexNode\", dimensions: [...], dotNotation: false}`,\n     *     where mathjs is optional\n     * @returns {IndexNode}\n     */\n\n\n    static fromJSON(json) {\n      return new IndexNode(json.dimensions, json.dotNotation);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      // format the parameters like \"[1, 0:5]\"\n      var dimensions = [];\n\n      for (var i = 0; i < this.dimensions.length; i++) {\n        dimensions[i] = this.dimensions[i].toHTML();\n      }\n\n      if (this.dotNotation) {\n        return '<span class=\"math-operator math-accessor-operator\">.</span>' + '<span class=\"math-symbol math-property\">' + escape(this.getObjectProperty()) + '</span>';\n      } else {\n        return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + dimensions.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n      }\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var dimensions = this.dimensions.map(function (range) {\n        return range.toTex(options);\n      });\n      return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';\n    }\n\n  }\n\n  _defineProperty(IndexNode, \"name\", name);\n\n  return IndexNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}