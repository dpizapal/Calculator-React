{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isArrayNode, isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  var ArrayNode = /*#__PURE__*/function (_Node) {\n    _inherits(ArrayNode, _Node);\n\n    var _super = _createSuper(ArrayNode);\n\n    /**\n     * @constructor ArrayNode\n     * @extends {Node}\n     * Holds an 1-dimensional array with items\n     * @param {Node[]} [items]   1 dimensional array with items\n     */\n    function ArrayNode(items) {\n      var _this;\n\n      _classCallCheck(this, ArrayNode);\n\n      _this = _super.call(this);\n      _this.items = items || []; // validate input\n\n      if (!Array.isArray(_this.items) || !_this.items.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected');\n      }\n\n      return _this;\n    }\n\n    _createClass(ArrayNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isArrayNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalItems = map(this.items, function (item) {\n          return item._compile(math, argNames);\n        });\n        var asMatrix = math.config.matrix !== 'Array';\n\n        if (asMatrix) {\n          var matrix = math.matrix;\n          return function evalArrayNode(scope, args, context) {\n            return matrix(map(evalItems, function (evalItem) {\n              return evalItem(scope, args, context);\n            }));\n          };\n        } else {\n          return function evalArrayNode(scope, args, context) {\n            return map(evalItems, function (evalItem) {\n              return evalItem(scope, args, context);\n            });\n          };\n        }\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        for (var i = 0; i < this.items.length; i++) {\n          var node = this.items[i];\n          callback(node, 'items[' + i + ']', this);\n        }\n      }\n      /**\n       * Create a new ArrayNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {ArrayNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var items = [];\n\n        for (var i = 0; i < this.items.length; i++) {\n          items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n        }\n\n        return new ArrayNode(items);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ArrayNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ArrayNode(this.items.slice(0));\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var items = this.items.map(function (node) {\n          return node.toString(options);\n        });\n        return '[' + items.join(', ') + ']';\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          items: this.items\n        };\n      }\n      /**\n       * Instantiate an ArrayNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n       *                       where mathjs is optional\n       * @returns {ArrayNode}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toHTML(options) {\n        var items = this.items.map(function (node) {\n          return node.toHTML(options);\n        });\n        return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        function itemsToTex(items, nested) {\n          var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\n          var itemsFormRow = nested || mixedItems;\n          var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\n          var itemsTex = items.map(function (node) {\n            if (node.items) {\n              return itemsToTex(node.items, !nested);\n            } else {\n              return node.toTex(options);\n            }\n          }).join(itemSep);\n          return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\n        }\n\n        return itemsToTex(this.items, false);\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ArrayNode(json.items);\n      }\n    }]);\n\n    return ArrayNode;\n  }(Node);\n\n  _defineProperty(ArrayNode, \"name\", name);\n\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isArrayNode","isNode","map","factory","name","dependencies","createArrayNode","_ref","Node","ArrayNode","items","Array","isArray","every","TypeError","math","argNames","evalItems","item","_compile","asMatrix","config","matrix","evalArrayNode","scope","args","context","evalItem","callback","i","length","node","_ifNode","slice","options","toString","join","mathjs","toHTML","itemsToTex","nested","mixedItems","some","itemsFormRow","itemSep","itemsTex","toTex","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/ArrayNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isArrayNode, isNode } from '../../utils/is.js';\nimport { map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ArrayNode extends Node {\n    /**\n     * @constructor ArrayNode\n     * @extends {Node}\n     * Holds an 1-dimensional array with items\n     * @param {Node[]} [items]   1 dimensional array with items\n     */\n    constructor(items) {\n      super();\n      this.items = items || []; // validate input\n\n      if (!Array.isArray(this.items) || !this.items.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected');\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isArrayNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalItems = map(this.items, function (item) {\n        return item._compile(math, argNames);\n      });\n      var asMatrix = math.config.matrix !== 'Array';\n\n      if (asMatrix) {\n        var matrix = math.matrix;\n        return function evalArrayNode(scope, args, context) {\n          return matrix(map(evalItems, function (evalItem) {\n            return evalItem(scope, args, context);\n          }));\n        };\n      } else {\n        return function evalArrayNode(scope, args, context) {\n          return map(evalItems, function (evalItem) {\n            return evalItem(scope, args, context);\n          });\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      for (var i = 0; i < this.items.length; i++) {\n        var node = this.items[i];\n        callback(node, 'items[' + i + ']', this);\n      }\n    }\n    /**\n     * Create a new ArrayNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {ArrayNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var items = [];\n\n      for (var i = 0; i < this.items.length; i++) {\n        items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n      }\n\n      return new ArrayNode(items);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ArrayNode}\n     */\n\n\n    clone() {\n      return new ArrayNode(this.items.slice(0));\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      var items = this.items.map(function (node) {\n        return node.toString(options);\n      });\n      return '[' + items.join(', ') + ']';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        items: this.items\n      };\n    }\n    /**\n     * Instantiate an ArrayNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n     *                       where mathjs is optional\n     * @returns {ArrayNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ArrayNode(json.items);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      var items = this.items.map(function (node) {\n        return node.toHTML(options);\n      });\n      return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      function itemsToTex(items, nested) {\n        var mixedItems = items.some(isArrayNode) && !items.every(isArrayNode);\n        var itemsFormRow = nested || mixedItems;\n        var itemSep = itemsFormRow ? '&' : '\\\\\\\\';\n        var itemsTex = items.map(function (node) {\n          if (node.items) {\n            return itemsToTex(node.items, !nested);\n          } else {\n            return node.toTex(options);\n          }\n        }).join(itemSep);\n        return mixedItems || !itemsFormRow || itemsFormRow && !nested ? '\\\\begin{bmatrix}' + itemsTex + '\\\\end{bmatrix}' : itemsTex;\n      }\n\n      return itemsToTex(this.items, false);\n    }\n\n  }\n\n  _defineProperty(ArrayNode, \"name\", name);\n\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}