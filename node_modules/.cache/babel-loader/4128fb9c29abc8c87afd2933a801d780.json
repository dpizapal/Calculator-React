{"ast":null,"code":"import _toConsumableArray from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var math = _ref.math,\n      Node = _ref.Node,\n      SymbolNode = _ref.SymbolNode;\n  /* format to fixed length */\n\n  var strin = function strin(entity) {\n    return format(entity, {\n      truncate: 78\n    });\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n\n  var FunctionNode = /*#__PURE__*/function (_Node) {\n    _inherits(FunctionNode, _Node);\n\n    var _super = _createSuper(FunctionNode);\n\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    function FunctionNode(fn, args) {\n      var _this;\n\n      _classCallCheck(this, FunctionNode);\n\n      _this = _super.call(this);\n\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      } // validate input\n\n\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n\n      _this.fn = fn;\n      _this.args = args || [];\n      return _this;\n    } // readonly property name\n\n\n    _createClass(FunctionNode, [{\n      key: \"name\",\n      get: function get() {\n        return this.fn.name || '';\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isFunctionNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        // compile arguments\n        var evalArgs = this.args.map(function (arg) {\n          return arg._compile(math, argNames);\n        });\n\n        if (isSymbolNode(this.fn)) {\n          var _name = this.fn.name;\n\n          if (!argNames[_name]) {\n            // we can statically determine whether the function\n            // has the rawArgs property\n            var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n            var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n            var resolveFn = function resolveFn(scope) {\n              var value;\n\n              if (scope.has(_name)) {\n                value = scope.get(_name);\n              } else if (_name in math) {\n                value = getSafeProperty(math, _name);\n              } else {\n                return FunctionNode.onUndefinedFunction(_name);\n              }\n\n              if (typeof value === 'function') {\n                return value;\n              }\n\n              throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n            };\n\n            if (isRaw) {\n              // pass unevaluated parameters (nodes) to the function\n              // \"raw\" evaluation\n              var rawArgs = this.args;\n              return function evalFunctionNode(scope, args, context) {\n                var fn = resolveFn(scope);\n                return fn(rawArgs, math, createSubScope(scope, args), scope);\n              };\n            } else {\n              // \"regular\" evaluation\n              switch (evalArgs.length) {\n                case 0:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    return fn();\n                  };\n\n                case 1:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    return fn(evalArg0(scope, args, context));\n                  };\n\n                case 2:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var evalArg0 = evalArgs[0];\n                    var evalArg1 = evalArgs[1];\n                    return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                  };\n\n                default:\n                  return function evalFunctionNode(scope, args, context) {\n                    var fn = resolveFn(scope);\n                    var values = evalArgs.map(function (evalArg) {\n                      return evalArg(scope, args, context);\n                    });\n                    return fn.apply(void 0, _toConsumableArray(values));\n                  };\n              }\n            }\n          } else {\n            // the function symbol is an argName\n            var _rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = args[_name];\n\n              if (typeof fn !== 'function') {\n                throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n              }\n\n              if (fn.rawArgs) {\n                // \"Raw\" evaluation\n                return fn(_rawArgs, math, createSubScope(scope, args), scope);\n              } else {\n                var values = evalArgs.map(function (evalArg) {\n                  return evalArg(scope, args, context);\n                });\n                return fn.apply(fn, values);\n              }\n            };\n          }\n        } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n          // execute the function with the right context:\n          // the object of the AccessorNode\n          var evalObject = this.fn.object._compile(math, argNames);\n\n          var prop = this.fn.index.getObjectProperty();\n          var _rawArgs2 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            validateSafeMethod(object, prop);\n            var isRaw = object[prop] && object[prop].rawArgs;\n\n            if (isRaw) {\n              // \"Raw\" evaluation\n              return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return object[prop].apply(object, values);\n            }\n          };\n        } else {\n          // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n          // we have to dynamically determine whether the function has the\n          // rawArgs property\n          var fnExpr = this.fn.toString();\n\n          var evalFn = this.fn._compile(math, argNames);\n\n          var _rawArgs3 = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = evalFn(scope, args, context);\n\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n            }\n\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n            } else {\n              // \"regular\" evaluation\n              var values = evalArgs.map(function (evalArg) {\n                return evalArg(scope, args, context);\n              });\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.fn, 'fn', this);\n\n        for (var i = 0; i < this.args.length; i++) {\n          callback(this.args[i], 'args[' + i + ']', this);\n        }\n      }\n      /**\n       * Create a new FunctionNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {FunctionNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n        var args = [];\n\n        for (var i = 0; i < this.args.length; i++) {\n          args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n        }\n\n        return new FunctionNode(fn, args);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {FunctionNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new FunctionNode(this.fn, this.args.slice(0));\n      }\n      /**\n       * Throws an error 'Undefined function {name}'\n       * @param {string} name\n       */\n\n      /**\n       * Get string representation. (wrapper function)\n       * This overrides parts of Node's toString function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toString\n       * function.\n       *\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n\n    }, {\n      key: \"toString\",\n      value: function toString(options) {\n        var customString;\n        var name = this.fn.toString(options);\n\n        if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n          // callback is a map of callback functions\n          customString = options.handler[name](this, options);\n        }\n\n        if (typeof customString !== 'undefined') {\n          return customString;\n        } // fall back to Node's toString\n\n\n        return _get(_getPrototypeOf(FunctionNode.prototype), \"toString\", this).call(this, options);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toString(options);\n        });\n        var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n        return fn + '(' + args.join(', ') + ')';\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          fn: this.fn,\n          args: this.args\n        };\n      }\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n       *                       where mathjs is optional\n       * @returns {FunctionNode}\n       */\n\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"toHTML\",\n      value: function toHTML(options) {\n        var args = this.args.map(function (arg) {\n          return arg.toHTML(options);\n        }); // format the arguments like \"add(2, 4.2)\"\n\n        return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n      /**\n       * Get LaTeX representation. (wrapper function)\n       * This overrides parts of Node's toTex function.\n       * If callback is an object containing callbacks, it\n       * calls the correct callback for the current node,\n       * otherwise it falls back to calling Node's toTex\n       * function.\n       *\n       * @param {Object} options\n       * @return {string}\n       */\n\n    }, {\n      key: \"toTex\",\n      value: function toTex(options) {\n        var customTex;\n\n        if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n          // callback is a map of callback functions\n          customTex = options.handler[this.name](this, options);\n        }\n\n        if (typeof customTex !== 'undefined') {\n          return customTex;\n        } // fall back to Node's toTex\n\n\n        return _get(_getPrototypeOf(FunctionNode.prototype), \"toTex\", this).call(this, options);\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var args = this.args.map(function (arg) {\n          // get LaTeX of the arguments\n          return arg.toTex(options);\n        });\n        var latexConverter;\n\n        if (latexFunctions[this.name]) {\n          latexConverter = latexFunctions[this.name];\n        } // toTex property on the function itself\n\n\n        if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n          // .toTex is a callback function\n          latexConverter = math[this.name].toTex;\n        }\n\n        var customToTex;\n\n        switch (typeof latexConverter) {\n          case 'function':\n            // a callback function\n            customToTex = latexConverter(this, options);\n            break;\n\n          case 'string':\n            // a template string\n            customToTex = expandTemplate(latexConverter, this, options);\n            break;\n\n          case 'object':\n            // an object with different \"converters\" for different\n            // numbers of arguments\n            switch (typeof latexConverter[args.length]) {\n              case 'function':\n                customToTex = latexConverter[args.length](this, options);\n                break;\n\n              case 'string':\n                customToTex = expandTemplate(latexConverter[args.length], this, options);\n                break;\n            }\n\n        }\n\n        if (typeof customToTex !== 'undefined') {\n          return customToTex;\n        }\n\n        return expandTemplate(defaultTemplate, this, options);\n      }\n      /**\n       * Get identifier.\n       * @return {string}\n       */\n\n    }, {\n      key: \"getIdentifier\",\n      value: function getIdentifier() {\n        return this.type + ':' + this.name;\n      }\n    }]);\n\n    return FunctionNode;\n  }(Node);\n\n  _defineProperty(FunctionNode, \"name\", name);\n\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","format","hasOwnProperty","getSafeProperty","validateSafeMethod","createSubScope","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","strin","entity","truncate","expandTemplate","template","node","options","latex","regex","inputPos","match","exec","substring","index","length","property","ReferenceError","undefined","toTex","Array","isArray","map","arg","TypeError","join","slice","FunctionNode","fn","args","every","argNames","evalArgs","_compile","_name","isRaw","rawArgs","resolveFn","scope","value","has","get","onUndefinedFunction","concat","evalFunctionNode","context","evalArg0","evalArg1","values","evalArg","_rawArgs","apply","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs2","fnExpr","toString","evalFn","_rawArgs3","callback","i","_ifNode","customString","handler","mathjs","toHTML","customTex","latexConverter","customToTex","type","Error","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      } // validate input\n\n\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n\n      this.fn = fn;\n      this.args = args || [];\n    } // readonly property name\n\n\n    get name() {\n      return this.fn.name || '';\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isFunctionNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n          var resolveFn = scope => {\n            var value;\n\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n\n            if (typeof value === 'function') {\n              return value;\n            }\n\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = args[_name];\n\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n        var evalObject = this.fn.object._compile(math, argNames);\n\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          validateSafeMethod(object, prop);\n          var isRaw = object[prop] && object[prop].rawArgs;\n\n          if (isRaw) {\n            // \"Raw\" evaluation\n            return object[prop](_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return object[prop].apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n\n        var evalFn = this.fn._compile(math, argNames);\n\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n      var args = [];\n\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n\n      return new FunctionNode(fn, args);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n\n\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n\n      if (typeof customString !== 'undefined') {\n        return customString;\n      } // fall back to Node's toString\n\n\n      return super.toString(options);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n      return fn + '(' + args.join(', ') + ')';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      }); // format the arguments like \"add(2, 4.2)\"\n\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toTex(options) {\n      var customTex;\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      } // fall back to Node's toTex\n\n\n      return super.toTex(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      } // toTex property on the function itself\n\n\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n\n      var customToTex;\n\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n\n      }\n\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n\n      return expandTemplate(defaultTemplate, this, options);\n    }\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n\n\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n\n  }\n\n  _defineProperty(FunctionNode, \"name\", name);\n\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}