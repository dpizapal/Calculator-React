{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n\n  var RelationalNode = /*#__PURE__*/function (_Node) {\n    _inherits(RelationalNode, _Node);\n\n    var _super = _createSuper(RelationalNode);\n\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    function RelationalNode(conditionals, params) {\n      var _this;\n\n      _classCallCheck(this, RelationalNode);\n\n      _this = _super.call(this);\n\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n\n      _this.conditionals = conditionals;\n      _this.params = params;\n      return _this;\n    }\n\n    _createClass(RelationalNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isRelationalNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var self = this;\n        var compiled = this.params.map(function (p) {\n          return p._compile(math, argNames);\n        });\n        return function evalRelationalNode(scope, args, context) {\n          var evalLhs;\n          var evalRhs = compiled[0](scope, args, context);\n\n          for (var i = 0; i < self.conditionals.length; i++) {\n            evalLhs = evalRhs;\n            evalRhs = compiled[i + 1](scope, args, context);\n            var condFn = getSafeProperty(math, self.conditionals[i]);\n\n            if (!condFn(evalLhs, evalRhs)) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        var _this2 = this;\n\n        this.params.forEach(function (n, i) {\n          return callback(n, 'params[' + i + ']', _this2);\n        }, this);\n      }\n      /**\n       * Create a new RelationalNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {RelationalNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var _this3 = this;\n\n        return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {\n          return _this3._ifNode(callback(n, 'params[' + i + ']', _this3));\n        }, this));\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {RelationalNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new RelationalNode(this.conditionals, this.params);\n      }\n      /**\n       * Get string representation.\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n        var paramStrings = this.params.map(function (p, index) {\n          var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n        });\n        var ret = paramStrings[0];\n\n        for (var i = 0; i < this.conditionals.length; i++) {\n          ret += ' ' + operatorMap[this.conditionals[i]];\n          ret += ' ' + paramStrings[i + 1];\n        }\n\n        return ret;\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          conditionals: this.conditionals,\n          params: this.params\n        };\n      }\n      /**\n       * Instantiate a RelationalNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n       *     where mathjs is optional\n       * @returns {RelationalNode}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      function toHTML(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n        var paramStrings = this.params.map(function (p, index) {\n          var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n        });\n        var ret = paramStrings[0];\n\n        for (var i = 0; i < this.conditionals.length; i++) {\n          ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n        }\n\n        return ret;\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n        var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n        var paramStrings = this.params.map(function (p, index) {\n          var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n          return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n        });\n        var ret = paramStrings[0];\n\n        for (var i = 0; i < this.conditionals.length; i++) {\n          ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n        }\n\n        return ret;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new RelationalNode(json.conditionals, json.params);\n      }\n    }]);\n\n    return RelationalNode;\n  }(Node);\n\n  _defineProperty(RelationalNode, \"name\", name);\n\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","getPrecedence","escape","getSafeProperty","latexOperators","factory","name","dependencies","createRelationalNode","_ref","Node","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","RelationalNode","conditionals","params","Array","isArray","TypeError","length","math","argNames","self","compiled","map","p","_compile","evalRelationalNode","scope","args","context","evalLhs","evalRhs","i","condFn","callback","forEach","n","slice","_ifNode","options","parenthesis","precedence","implicit","paramStrings","index","paramPrecedence","toString","ret","mathjs","toHTML","toTex","json","isClass","isNode"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/RelationalNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n\n  class RelationalNode extends Node {\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    constructor(conditionals, params) {\n      super();\n\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n\n      this.conditionals = conditionals;\n      this.params = params;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isRelationalNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var self = this;\n      var compiled = this.params.map(p => p._compile(math, argNames));\n      return function evalRelationalNode(scope, args, context) {\n        var evalLhs;\n        var evalRhs = compiled[0](scope, args, context);\n\n        for (var i = 0; i < self.conditionals.length; i++) {\n          evalLhs = evalRhs;\n          evalRhs = compiled[i + 1](scope, args, context);\n          var condFn = getSafeProperty(math, self.conditionals[i]);\n\n          if (!condFn(evalLhs, evalRhs)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);\n    }\n    /**\n     * Create a new RelationalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RelationalNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RelationalNode}\n     */\n\n\n    clone() {\n      return new RelationalNode(this.conditionals, this.params);\n    }\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += ' ' + operatorMap[this.conditionals[i]];\n        ret += ' ' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        conditionals: this.conditionals,\n        params: this.params\n      };\n    }\n    /**\n     * Instantiate a RelationalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n     *     where mathjs is optional\n     * @returns {RelationalNode}\n     */\n\n\n    static fromJSON(json) {\n      return new RelationalNode(json.conditionals, json.params);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n\n  }\n\n  _defineProperty(RelationalNode, \"name\", name);\n\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}