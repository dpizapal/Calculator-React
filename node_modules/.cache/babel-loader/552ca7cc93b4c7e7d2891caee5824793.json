{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var subset = _ref.subset,\n      matrix = _ref.matrix,\n      Node = _ref.Node;\n  var access = accessFactory({\n    subset: subset\n  });\n  var assign = assignFactory({\n    subset: subset,\n    matrix: matrix\n  });\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n\n  var AssignmentNode = /*#__PURE__*/function (_Node) {\n    _inherits(AssignmentNode, _Node);\n\n    var _super = _createSuper(AssignmentNode);\n\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    function AssignmentNode(object, index, value) {\n      var _this;\n\n      _classCallCheck(this, AssignmentNode);\n\n      _this = _super.call(this);\n      _this.object = object;\n      _this.index = value ? index : null;\n      _this.value = value || index; // validate input\n\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n\n      if (_this.index && !isIndexNode(_this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n\n      if (!isNode(_this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n\n      return _this;\n    } // class name for typing purposes:\n    // readonly property name\n\n\n    _createClass(AssignmentNode, [{\n      key: \"name\",\n      get: function get() {\n        if (this.index) {\n          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n        } else {\n          return this.object.name || '';\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isAssignmentNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var evalObject = this.object._compile(math, argNames);\n\n        var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n        var evalValue = this.value._compile(math, argNames);\n\n        var name = this.object.name;\n\n        if (!this.index) {\n          // apply a variable to the scope, for example `a=2`\n          if (!isSymbolNode(this.object)) {\n            throw new TypeError('SymbolNode expected as object');\n          }\n\n          return function evalAssignmentNode(scope, args, context) {\n            var value = evalValue(scope, args, context);\n            scope.set(name, value);\n            return value;\n          };\n        } else if (this.index.isObjectProperty()) {\n          // apply an object property for example `a.b=2`\n          var prop = this.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var object = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(object, prop, value);\n            return value;\n          };\n        } else if (isSymbolNode(this.object)) {\n          // update a matrix subset, for example `a[2]=3`\n          return function evalAssignmentNode(scope, args, context) {\n            var childObject = evalObject(scope, args, context);\n            var value = evalValue(scope, args, context); // Important:  we pass childObject instead of context:\n\n            var index = evalIndex(scope, args, childObject);\n            scope.set(name, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // isAccessorNode(node.object) === true\n          // update a matrix subset, for example `a.b[2]=3`\n          // we will not use the compile function of the AccessorNode, but\n          // compile it ourselves here as we need the parent object of the\n          // AccessorNode:\n          // wee need to apply the updated object to parent object\n          var evalParentObject = this.object.object._compile(math, argNames);\n\n          if (this.object.index.isObjectProperty()) {\n            var parentProp = this.object.index.getObjectProperty();\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context);\n              var childObject = getSafeProperty(parent, parentProp); // Important: we pass childObject instead of context:\n\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              setSafeProperty(parent, parentProp, assign(childObject, index, value));\n              return value;\n            };\n          } else {\n            // if some parameters use the 'end' parameter, we need to calculate\n            // the size\n            var evalParentIndex = this.object.index._compile(math, argNames);\n\n            return function evalAssignmentNode(scope, args, context) {\n              var parent = evalParentObject(scope, args, context); // Important: we pass parent instead of context:\n\n              var parentIndex = evalParentIndex(scope, args, parent);\n              var childObject = access(parent, parentIndex); // Important:  we pass childObject instead of context\n\n              var index = evalIndex(scope, args, childObject);\n              var value = evalValue(scope, args, context);\n              assign(parent, parentIndex, assign(childObject, index, value));\n              return value;\n            };\n          }\n        }\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.object, 'object', this);\n\n        if (this.index) {\n          callback(this.index, 'index', this);\n        }\n\n        callback(this.value, 'value', this);\n      }\n      /**\n       * Create a new AssignmentNode whose children are the results of calling\n       * the provided callback function for each child of the original node.\n       * @param {function(child: Node, path: string, parent: Node): Node} callback\n       * @returns {AssignmentNode} Returns a transformed copy of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var object = this._ifNode(callback(this.object, 'object', this));\n\n        var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n        var value = this._ifNode(callback(this.value, 'value', this));\n\n        return new AssignmentNode(object, index, value);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {AssignmentNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new AssignmentNode(this.object, this.index, this.value);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string}\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        var object = this.object.toString(options);\n        var index = this.index ? this.index.toString(options) : '';\n        var value = this.value.toString(options);\n\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '(' + value + ')';\n        }\n\n        return object + index + ' = ' + value;\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          object: this.object,\n          index: this.index,\n          value: this.value\n        };\n      }\n      /**\n       * Instantiate an AssignmentNode from its JSON representation\n       * @param {Object} json\n       *     An object structured like\n       *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n       *     where mathjs is optional\n       * @returns {AssignmentNode}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string}\n       */\n      function toHTML(options) {\n        var object = this.object.toHTML(options);\n        var index = this.index ? this.index.toHTML(options) : '';\n        var value = this.value.toHTML(options);\n\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n        }\n\n        return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string}\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        var object = this.object.toTex(options);\n        var index = this.index ? this.index.toTex(options) : '';\n        var value = this.value.toTex(options);\n\n        if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n          value = \"\\\\left(\".concat(value, \"\\\\right)\");\n        }\n\n        return object + index + ':=' + value;\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new AssignmentNode(json.object, json.index, json.value);\n      }\n    }]);\n\n    return AssignmentNode;\n  }(Node);\n\n  _defineProperty(AssignmentNode, \"name\", name);\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","value","AssignmentNode","object","index","TypeError","Error","isObjectProperty","getObjectProperty","math","argNames","evalObject","_compile","evalIndex","evalValue","evalAssignmentNode","scope","args","context","set","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","callback","_ifNode","options","toString","mathjs","toHTML","toTex","concat","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index; // validate input\n\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    } // class name for typing purposes:\n\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isAssignmentNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n      var evalValue = this.value._compile(math, argNames);\n\n      var name = this.object.name;\n\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context); // Important:  we pass childObject instead of context:\n\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp); // Important: we pass childObject instead of context:\n\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context); // Important: we pass parent instead of context:\n\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex); // Important:  we pass childObject instead of context\n\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.object, 'object', this);\n\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n\n      callback(this.value, 'value', this);\n    }\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n      var value = this._ifNode(callback(this.value, 'value', this));\n\n      return new AssignmentNode(object, index, value);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n\n\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n\n      return object + index + ' = ' + value;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n\n\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n\n      return object + index + ':=' + value;\n    }\n\n  }\n\n  _defineProperty(AssignmentNode, \"name\", name);\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":";;;;AAAA,OAAOA,eAAP,MAA4B,uCAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,MAAtC,EAA8CC,YAA9C,QAAkE,mBAAlE;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,wBAAjD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,IAAIC,IAAI,GAAG,gBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB;AACzC,MADmB,CAAnB;AAEA,OAAO,IAAIC,oBAAoB,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqB,UAAAE,IAAI,EAAI;EACnF,IACEC,MADF,GAIID,IAJJ,CACEC,MADF;EAAA,IAEEC,MAFF,GAIIF,IAJJ,CAEEE,MAFF;EAAA,IAGEC,IAHF,GAIIH,IAJJ,CAGEG,IAHF;EAKA,IAAIC,MAAM,GAAGV,aAAa,CAAC;IACzBO,MAAM,EAANA;EADyB,CAAD,CAA1B;EAGA,IAAII,MAAM,GAAGV,aAAa,CAAC;IACzBM,MAAM,EAANA,MADyB;IAEzBC,MAAM,EAANA;EAFyB,CAAD,CAA1B;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASI,eAAT,CAAyBC,IAAzB,EAA+BC,WAA/B,EAA4CC,QAA5C,EAAsD;IACpD,IAAI,CAACD,WAAL,EAAkB;MAChBA,WAAW,GAAG,MAAd;IACD;;IAED,IAAIE,UAAU,GAAGd,aAAa,CAACW,IAAD,EAAOC,WAAP,EAAoBC,QAApB,CAA9B;IACA,IAAIE,cAAc,GAAGf,aAAa,CAACW,IAAI,CAACK,KAAN,EAAaJ,WAAb,EAA0BC,QAA1B,CAAlC;IACA,OAAOD,WAAW,KAAK,KAAhB,IAAyBG,cAAc,KAAK,IAAnB,IAA2BA,cAAc,IAAID,UAA7E;EACD;;EA7BkF,IA+B7EG,cA/B6E;IAAA;;IAAA;;IAgCjF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,wBAAYC,MAAZ,EAAoBC,KAApB,EAA2BH,KAA3B,EAAkC;MAAA;;MAAA;;MAChC;MACA,MAAKE,MAAL,GAAcA,MAAd;MACA,MAAKC,KAAL,GAAaH,KAAK,GAAGG,KAAH,GAAW,IAA7B;MACA,MAAKH,KAAL,GAAaA,KAAK,IAAIG,KAAtB,CAJgC,CAIH;;MAE7B,IAAI,CAACzB,YAAY,CAACwB,MAAD,CAAb,IAAyB,CAAC3B,cAAc,CAAC2B,MAAD,CAA5C,EAAsD;QACpD,MAAM,IAAIE,SAAJ,CAAc,iDAAd,CAAN;MACD;;MAED,IAAI1B,YAAY,CAACwB,MAAD,CAAZ,IAAwBA,MAAM,CAACjB,IAAP,KAAgB,KAA5C,EAAmD;QACjD,MAAM,IAAIoB,KAAJ,CAAU,+BAAV,CAAN;MACD;;MAED,IAAI,MAAKF,KAAL,IAAc,CAAC3B,WAAW,CAAC,MAAK2B,KAAN,CAA9B,EAA4C;QAC1C;QACA,MAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;MACD;;MAED,IAAI,CAAC3B,MAAM,CAAC,MAAKuB,KAAN,CAAX,EAAyB;QACvB,MAAM,IAAII,SAAJ,CAAc,0BAAd,CAAN;MACD;;MArB+B;IAsBjC,CArFgF,CAqF/E;IAGF;;;IAxFiF;MAAA;MAAA,KAyFjF,eAAW;QACT,IAAI,KAAKD,KAAT,EAAgB;UACd,OAAO,KAAKA,KAAL,CAAWG,gBAAX,KAAgC,KAAKH,KAAL,CAAWI,iBAAX,EAAhC,GAAiE,EAAxE;QACD,CAFD,MAEO;UACL,OAAO,KAAKL,MAAL,CAAYjB,IAAZ,IAAoB,EAA3B;QACD;MACF;IA/FgF;MAAA;MAAA,KAiGjF,eAAW;QACT,OAAOA,IAAP;MACD;IAnGgF;MAAA;MAAA,KAqGjF,eAAuB;QACrB,OAAO,IAAP;MACD;MACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IApHqF;MAAA;MAAA,OAuHjF,kBAASuB,IAAT,EAAeC,QAAf,EAAyB;QACvB,IAAIC,UAAU,GAAG,KAAKR,MAAL,CAAYS,QAAZ,CAAqBH,IAArB,EAA2BC,QAA3B,CAAjB;;QAEA,IAAIG,SAAS,GAAG,KAAKT,KAAL,GAAa,KAAKA,KAAL,CAAWQ,QAAX,CAAoBH,IAApB,EAA0BC,QAA1B,CAAb,GAAmD,IAAnE;;QAEA,IAAII,SAAS,GAAG,KAAKb,KAAL,CAAWW,QAAX,CAAoBH,IAApB,EAA0BC,QAA1B,CAAhB;;QAEA,IAAIxB,IAAI,GAAG,KAAKiB,MAAL,CAAYjB,IAAvB;;QAEA,IAAI,CAAC,KAAKkB,KAAV,EAAiB;UACf;UACA,IAAI,CAACzB,YAAY,CAAC,KAAKwB,MAAN,CAAjB,EAAgC;YAC9B,MAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;UACD;;UAED,OAAO,SAASU,kBAAT,CAA4BC,KAA5B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;YACvD,IAAIjB,KAAK,GAAGa,SAAS,CAACE,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAArB;YACAF,KAAK,CAACG,GAAN,CAAUjC,IAAV,EAAgBe,KAAhB;YACA,OAAOA,KAAP;UACD,CAJD;QAKD,CAXD,MAWO,IAAI,KAAKG,KAAL,CAAWG,gBAAX,EAAJ,EAAmC;UACxC;UACA,IAAIa,IAAI,GAAG,KAAKhB,KAAL,CAAWI,iBAAX,EAAX;UACA,OAAO,SAASO,kBAAT,CAA4BC,KAA5B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;YACvD,IAAIf,MAAM,GAAGQ,UAAU,CAACK,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAAvB;YACA,IAAIjB,KAAK,GAAGa,SAAS,CAACE,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAArB;YACArC,eAAe,CAACsB,MAAD,EAASiB,IAAT,EAAenB,KAAf,CAAf;YACA,OAAOA,KAAP;UACD,CALD;QAMD,CATM,MASA,IAAItB,YAAY,CAAC,KAAKwB,MAAN,CAAhB,EAA+B;UACpC;UACA,OAAO,SAASY,kBAAT,CAA4BC,KAA5B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;YACvD,IAAIG,WAAW,GAAGV,UAAU,CAACK,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAA5B;YACA,IAAIjB,KAAK,GAAGa,SAAS,CAACE,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAArB,CAFuD,CAEV;;YAE7C,IAAId,KAAK,GAAGS,SAAS,CAACG,KAAD,EAAQC,IAAR,EAAcI,WAAd,CAArB;YACAL,KAAK,CAACG,GAAN,CAAUjC,IAAV,EAAgBQ,MAAM,CAAC2B,WAAD,EAAcjB,KAAd,EAAqBH,KAArB,CAAtB;YACA,OAAOA,KAAP;UACD,CAPD;QAQD,CAVM,MAUA;UACL;UACA;UACA;UACA;UACA;UACA;UACA,IAAIqB,gBAAgB,GAAG,KAAKnB,MAAL,CAAYA,MAAZ,CAAmBS,QAAnB,CAA4BH,IAA5B,EAAkCC,QAAlC,CAAvB;;UAEA,IAAI,KAAKP,MAAL,CAAYC,KAAZ,CAAkBG,gBAAlB,EAAJ,EAA0C;YACxC,IAAIgB,UAAU,GAAG,KAAKpB,MAAL,CAAYC,KAAZ,CAAkBI,iBAAlB,EAAjB;YACA,OAAO,SAASO,kBAAT,CAA4BC,KAA5B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;cACvD,IAAIM,MAAM,GAAGF,gBAAgB,CAACN,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAA7B;cACA,IAAIG,WAAW,GAAGzC,eAAe,CAAC4C,MAAD,EAASD,UAAT,CAAjC,CAFuD,CAEA;;cAEvD,IAAInB,KAAK,GAAGS,SAAS,CAACG,KAAD,EAAQC,IAAR,EAAcI,WAAd,CAArB;cACA,IAAIpB,KAAK,GAAGa,SAAS,CAACE,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAArB;cACArC,eAAe,CAAC2C,MAAD,EAASD,UAAT,EAAqB7B,MAAM,CAAC2B,WAAD,EAAcjB,KAAd,EAAqBH,KAArB,CAA3B,CAAf;cACA,OAAOA,KAAP;YACD,CARD;UASD,CAXD,MAWO;YACL;YACA;YACA,IAAIwB,eAAe,GAAG,KAAKtB,MAAL,CAAYC,KAAZ,CAAkBQ,QAAlB,CAA2BH,IAA3B,EAAiCC,QAAjC,CAAtB;;YAEA,OAAO,SAASK,kBAAT,CAA4BC,KAA5B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;cACvD,IAAIM,MAAM,GAAGF,gBAAgB,CAACN,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAA7B,CADuD,CACF;;cAErD,IAAIQ,WAAW,GAAGD,eAAe,CAACT,KAAD,EAAQC,IAAR,EAAcO,MAAd,CAAjC;cACA,IAAIH,WAAW,GAAG5B,MAAM,CAAC+B,MAAD,EAASE,WAAT,CAAxB,CAJuD,CAIR;;cAE/C,IAAItB,KAAK,GAAGS,SAAS,CAACG,KAAD,EAAQC,IAAR,EAAcI,WAAd,CAArB;cACA,IAAIpB,KAAK,GAAGa,SAAS,CAACE,KAAD,EAAQC,IAAR,EAAcC,OAAd,CAArB;cACAxB,MAAM,CAAC8B,MAAD,EAASE,WAAT,EAAsBhC,MAAM,CAAC2B,WAAD,EAAcjB,KAAd,EAAqBH,KAArB,CAA5B,CAAN;cACA,OAAOA,KAAP;YACD,CAVD;UAWD;QACF;MACF;MACD;AACJ;AACA;AACA;;IAxMqF;MAAA;MAAA,OA2MjF,iBAAQ0B,QAAR,EAAkB;QAChBA,QAAQ,CAAC,KAAKxB,MAAN,EAAc,QAAd,EAAwB,IAAxB,CAAR;;QAEA,IAAI,KAAKC,KAAT,EAAgB;UACduB,QAAQ,CAAC,KAAKvB,KAAN,EAAa,OAAb,EAAsB,IAAtB,CAAR;QACD;;QAEDuB,QAAQ,CAAC,KAAK1B,KAAN,EAAa,OAAb,EAAsB,IAAtB,CAAR;MACD;MACD;AACJ;AACA;AACA;AACA;AACA;;IAzNqF;MAAA;MAAA,OA4NjF,aAAI0B,QAAJ,EAAc;QACZ,IAAIxB,MAAM,GAAG,KAAKyB,OAAL,CAAaD,QAAQ,CAAC,KAAKxB,MAAN,EAAc,QAAd,EAAwB,IAAxB,CAArB,CAAb;;QAEA,IAAIC,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKwB,OAAL,CAAaD,QAAQ,CAAC,KAAKvB,KAAN,EAAa,OAAb,EAAsB,IAAtB,CAArB,CAAb,GAAiE,IAA7E;;QAEA,IAAIH,KAAK,GAAG,KAAK2B,OAAL,CAAaD,QAAQ,CAAC,KAAK1B,KAAN,EAAa,OAAb,EAAsB,IAAtB,CAArB,CAAZ;;QAEA,OAAO,IAAIC,cAAJ,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCH,KAAlC,CAAP;MACD;MACD;AACJ;AACA;AACA;;IAxOqF;MAAA;MAAA,OA2OjF,iBAAQ;QACN,OAAO,IAAIC,cAAJ,CAAmB,KAAKC,MAAxB,EAAgC,KAAKC,KAArC,EAA4C,KAAKH,KAAjD,CAAP;MACD;MACD;AACJ;AACA;AACA;AACA;;IAlPqF;MAAA;MAAA,OAqPjF,mBAAU4B,OAAV,EAAmB;QACjB,IAAI1B,MAAM,GAAG,KAAKA,MAAL,CAAY2B,QAAZ,CAAqBD,OAArB,CAAb;QACA,IAAIzB,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKA,KAAL,CAAW0B,QAAX,CAAoBD,OAApB,CAAb,GAA4C,EAAxD;QACA,IAAI5B,KAAK,GAAG,KAAKA,KAAL,CAAW6B,QAAX,CAAoBD,OAApB,CAAZ;;QAEA,IAAIlC,eAAe,CAAC,IAAD,EAAOkC,OAAO,IAAIA,OAAO,CAAChC,WAA1B,EAAuCgC,OAAO,IAAIA,OAAO,CAAC/B,QAA1D,CAAnB,EAAwF;UACtFG,KAAK,GAAG,MAAMA,KAAN,GAAc,GAAtB;QACD;;QAED,OAAOE,MAAM,GAAGC,KAAT,GAAiB,KAAjB,GAAyBH,KAAhC;MACD;MACD;AACJ;AACA;AACA;;IAnQqF;MAAA;MAAA,OAsQjF,kBAAS;QACP,OAAO;UACL8B,MAAM,EAAE7C,IADH;UAELiB,MAAM,EAAE,KAAKA,MAFR;UAGLC,KAAK,EAAE,KAAKA,KAHP;UAILH,KAAK,EAAE,KAAKA;QAJP,CAAP;MAMD;MACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IArRqF;MAAA;MAAA;MA2RjF;AACJ;AACA;AACA;AACA;MAGI,gBAAO4B,OAAP,EAAgB;QACd,IAAI1B,MAAM,GAAG,KAAKA,MAAL,CAAY6B,MAAZ,CAAmBH,OAAnB,CAAb;QACA,IAAIzB,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKA,KAAL,CAAW4B,MAAX,CAAkBH,OAAlB,CAAb,GAA0C,EAAtD;QACA,IAAI5B,KAAK,GAAG,KAAKA,KAAL,CAAW+B,MAAX,CAAkBH,OAAlB,CAAZ;;QAEA,IAAIlC,eAAe,CAAC,IAAD,EAAOkC,OAAO,IAAIA,OAAO,CAAChC,WAA1B,EAAuCgC,OAAO,IAAIA,OAAO,CAAC/B,QAA1D,CAAnB,EAAwF;UACtFG,KAAK,GAAG,mEAAmEA,KAAnE,GAA2E,gEAAnF;QACD;;QAED,OAAOE,MAAM,GAAGC,KAAT,GAAiB,sDAAjB,GAA0E,kEAA1E,GAA+IH,KAAtJ;MACD;MACD;AACJ;AACA;AACA;AACA;;IAjTqF;MAAA;MAAA,OAoTjF,gBAAO4B,OAAP,EAAgB;QACd,IAAI1B,MAAM,GAAG,KAAKA,MAAL,CAAY8B,KAAZ,CAAkBJ,OAAlB,CAAb;QACA,IAAIzB,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKA,KAAL,CAAW6B,KAAX,CAAiBJ,OAAjB,CAAb,GAAyC,EAArD;QACA,IAAI5B,KAAK,GAAG,KAAKA,KAAL,CAAWgC,KAAX,CAAiBJ,OAAjB,CAAZ;;QAEA,IAAIlC,eAAe,CAAC,IAAD,EAAOkC,OAAO,IAAIA,OAAO,CAAChC,WAA1B,EAAuCgC,OAAO,IAAIA,OAAO,CAAC/B,QAA1D,CAAnB,EAAwF;UACtFG,KAAK,GAAG,UAAUiC,MAAV,CAAiBjC,KAAjB,EAAwB,UAAxB,CAAR;QACD;;QAED,OAAOE,MAAM,GAAGC,KAAT,GAAiB,IAAjB,GAAwBH,KAA/B;MACD;IA9TgF;MAAA;MAAA,OAwRjF,kBAAgBkC,IAAhB,EAAsB;QACpB,OAAO,IAAIjC,cAAJ,CAAmBiC,IAAI,CAAChC,MAAxB,EAAgCgC,IAAI,CAAC/B,KAArC,EAA4C+B,IAAI,CAAClC,KAAjD,CAAP;MACD;IA1RgF;;IAAA;EAAA,EA+BtDT,IA/BsD;;EAkUnFjB,eAAe,CAAC2B,cAAD,EAAiB,MAAjB,EAAyBhB,IAAzB,CAAf;;EAEA,OAAOgB,cAAP;AACD,CArUuD,EAqUrD;EACDkC,OAAO,EAAE,IADR;EAED1D,MAAM,EAAE;AAFP,CArUqD,CAAjD"},"metadata":{},"sourceType":"module"}