{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      equalScalar = _ref.equalScalar,\n      matrix = _ref.matrix,\n      BigNumber = _ref.BigNumber,\n      Fraction = _ref.Fraction,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed: typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed: typed\n  });\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, createCompareNumber({\n    typed: typed,\n    config: config\n  }), {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});","map":{"version":3,"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo12xSfs","createMatAlgo05xSfSf","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createCompare","_ref","typed","config","equalScalar","matrix","BigNumber","Fraction","DenseMatrix","matAlgo03xDSf","matAlgo05xSfSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createCompareNumber","booleanBoolean","x","y","BigNumberBigNumber","epsilon","cmp","FractionFraction","compare","ComplexComplex","TypeError","SS","DS","Ss","_ref2","numberNumber"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/function/relational/compare.js"],"sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'compare';\nvar dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport var createCompare = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    BigNumber,\n    Fraction,\n    DenseMatrix\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  return typed(name, createCompareNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createCompareNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}