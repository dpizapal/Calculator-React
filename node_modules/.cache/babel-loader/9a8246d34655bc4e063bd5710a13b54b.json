{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed: typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed: typed,\n    matrix: matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(function (self) {\n    return function (a, b, args) {\n      var res = self(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n\n      return res;\n    };\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.gcd(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","gcdNumber","name","dependencies","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","gcdTypes","gcdManySignature","concat","referToSelf","self","a","b","args","res","i","length","_gcdBigNumber","x","y","gcd","SS","DS","Ss","isInt","Error","zero","isZero","r","mod","lt","neg"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n\n    return res;\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}