{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  var ParenthesisNode = /*#__PURE__*/function (_Node) {\n    _inherits(ParenthesisNode, _Node);\n\n    var _super = _createSuper(ParenthesisNode);\n\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    function ParenthesisNode(content) {\n      var _this;\n\n      _classCallCheck(this, ParenthesisNode);\n\n      _this = _super.call(this); // validate input\n\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n\n      _this.content = content;\n      return _this;\n    }\n\n    _createClass(ParenthesisNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isParenthesisNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        return this.content._compile(math, argNames);\n      }\n      /**\n       * Get the content of the current Node.\n       * @return {Node} content\n       * @override\n       **/\n\n    }, {\n      key: \"getContent\",\n      value: function getContent() {\n        return this.content.getContent();\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        callback(this.content, 'content', this);\n      }\n      /**\n       * Create a new ParenthesisNode whose child is the result of calling\n       * the provided callback function on the child of this node.\n       * @param {function(child: Node, path: string, parent: Node) : Node} callback\n       * @returns {ParenthesisNode} Returns a clone of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var content = callback(this.content, 'content', this);\n        return new ParenthesisNode(content);\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ParenthesisNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ParenthesisNode(this.content);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return '(' + this.content.toString(options) + ')';\n        }\n\n        return this.content.toString(options);\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          content: this.content\n        };\n      }\n      /**\n       * Instantiate an ParenthesisNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n       *                       where mathjs is optional\n       * @returns {ParenthesisNode}\n       */\n\n    }, {\n      key: \"toHTML\",\n      value:\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n      function toHTML(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n        }\n\n        return this.content.toHTML(options);\n      }\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       * @override\n       */\n\n    }, {\n      key: \"_toTex\",\n      value: function _toTex(options) {\n        if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n          return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n        }\n\n        return this.content.toTex(options);\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ParenthesisNode(json.content);\n      }\n    }]);\n\n    return ParenthesisNode;\n  }(Node);\n\n  _defineProperty(ParenthesisNode, \"name\", name);\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","factory","name","dependencies","createParenthesisNode","_ref","Node","ParenthesisNode","content","TypeError","math","argNames","_compile","getContent","callback","options","parenthesis","toString","mathjs","toHTML","concat","toTex","json","isClass"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ParenthesisNode extends Node {\n    /**\n     * @constructor ParenthesisNode\n     * @extends {Node}\n     * A parenthesis node describes manual parenthesis from the user input\n     * @param {Node} content\n     * @extends {Node}\n     */\n    constructor(content) {\n      super(); // validate input\n\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n\n      this.content = content;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isParenthesisNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n    /**\n     * Get the content of the current Node.\n     * @return {Node} content\n     * @override\n     **/\n\n\n    getContent() {\n      return this.content.getContent();\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n    /**\n     * Create a new ParenthesisNode whose child is the result of calling\n     * the provided callback function on the child of this node.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ParenthesisNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ParenthesisNode}\n     */\n\n\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n\n      return this.content.toString(options);\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n    /**\n     * Instantiate an ParenthesisNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\n     *                       where mathjs is optional\n     * @returns {ParenthesisNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return this.content.toHTML(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n\n      return this.content.toTex(options);\n    }\n\n  }\n\n  _defineProperty(ParenthesisNode, \"name\", name);\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}