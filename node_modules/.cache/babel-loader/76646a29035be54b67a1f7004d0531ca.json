{"ast":null,"code":"import _classCallCheck from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/Calculator-React/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  var ConstantNode = /*#__PURE__*/function (_Node) {\n    _inherits(ConstantNode, _Node);\n\n    var _super = _createSuper(ConstantNode);\n\n    /**\n     * A ConstantNode holds a constant value like a number or string.\n     *\n     * Usage:\n     *\n     *     new ConstantNode(2.3)\n     *     new ConstantNode('hello')\n     *\n     * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n     * @constructor ConstantNode\n     * @extends {Node}\n     */\n    function ConstantNode(value) {\n      var _this;\n\n      _classCallCheck(this, ConstantNode);\n\n      _this = _super.call(this);\n      _this.value = value;\n      return _this;\n    }\n\n    _createClass(ConstantNode, [{\n      key: \"type\",\n      get: function get() {\n        return name;\n      }\n    }, {\n      key: \"isConstantNode\",\n      get: function get() {\n        return true;\n      }\n      /**\n       * Compile a node into a JavaScript function.\n       * This basically pre-calculates as much as possible and only leaves open\n       * calculations which depend on a dynamic scope with variables.\n       * @param {Object} math     Math.js namespace with functions and constants.\n       * @param {Object} argNames An object with argument names as key and `true`\n       *                          as value. Used in the SymbolNode to optimize\n       *                          for arguments from user assigned functions\n       *                          (see FunctionAssignmentNode) or special symbols\n       *                          like `end` (see IndexNode).\n       * @return {function} Returns a function which can be called like:\n       *                        evalNode(scope: Object, args: Object, context: *)\n       */\n\n    }, {\n      key: \"_compile\",\n      value: function _compile(math, argNames) {\n        var value = this.value;\n        return function evalConstantNode() {\n          return value;\n        };\n      }\n      /**\n       * Execute a callback for each of the child nodes of this node\n       * @param {function(child: Node, path: string, parent: Node)} callback\n       */\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {// nothing to do, we don't have any children\n      }\n      /**\n       * Create a new ConstantNode with children produced by the given callback.\n       * Trivial because there are no children.\n       * @param {function(child: Node, path: string, parent: Node) : Node} callback\n       * @returns {ConstantNode} Returns a clone of the node\n       */\n\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        return this.clone();\n      }\n      /**\n       * Create a clone of this node, a shallow copy\n       * @return {ConstantNode}\n       */\n\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new ConstantNode(this.value);\n      }\n      /**\n       * Get string representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"_toString\",\n      value: function _toString(options) {\n        return format(this.value, options);\n      }\n      /**\n       * Get HTML representation\n       * @param {Object} options\n       * @return {string} str\n       */\n\n    }, {\n      key: \"toHTML\",\n      value: function toHTML(options) {\n        var value = this._toString(options);\n\n        switch (typeOf(this.value)) {\n          case 'number':\n          case 'BigNumber':\n          case 'Fraction':\n            return '<span class=\"math-number\">' + value + '</span>';\n\n          case 'string':\n            return '<span class=\"math-string\">' + value + '</span>';\n\n          case 'boolean':\n            return '<span class=\"math-boolean\">' + value + '</span>';\n\n          case 'null':\n            return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n          case 'undefined':\n            return '<span class=\"math-undefined\">' + value + '</span>';\n\n          default:\n            return '<span class=\"math-symbol\">' + value + '</span>';\n        }\n      }\n      /**\n       * Get a JSON representation of the node\n       * @returns {Object}\n       */\n\n    }, {\n      key: \"toJSON\",\n      value: function toJSON() {\n        return {\n          mathjs: name,\n          value: this.value\n        };\n      }\n      /**\n       * Instantiate a ConstantNode from its JSON representation\n       * @param {Object} json  An object structured like\n       *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n       *                       where mathjs is optional\n       * @returns {ConstantNode}\n       */\n\n    }, {\n      key: \"_toTex\",\n      value:\n      /**\n       * Get LaTeX representation\n       * @param {Object} options\n       * @return {string} str\n       */\n      function _toTex(options) {\n        var value = this._toString(options);\n\n        switch (typeOf(this.value)) {\n          case 'string':\n            return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n          case 'number':\n          case 'BigNumber':\n            {\n              if (!isFinite(this.value)) {\n                return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n              }\n\n              var index = value.toLowerCase().indexOf('e');\n\n              if (index !== -1) {\n                return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n              }\n            }\n            return value;\n\n          case 'Fraction':\n            return this.value.toLatex();\n\n          default:\n            return value;\n        }\n      }\n    }], [{\n      key: \"fromJSON\",\n      value: function fromJSON(json) {\n        return new ConstantNode(json.value);\n      }\n    }]);\n\n    return ConstantNode;\n  }(Node);\n\n  _defineProperty(ConstantNode, \"name\", name);\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","format","typeOf","escapeLatex","factory","name","dependencies","createConstantNode","_ref","Node","ConstantNode","value","math","argNames","evalConstantNode","callback","clone","options","_toString","mathjs","isFinite","valueOf","index","toLowerCase","indexOf","substring","toLatex","json","isClass","isNode"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/expression/node/ConstantNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ConstantNode extends Node {\n    /**\n     * A ConstantNode holds a constant value like a number or string.\n     *\n     * Usage:\n     *\n     *     new ConstantNode(2.3)\n     *     new ConstantNode('hello')\n     *\n     * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n     * @constructor ConstantNode\n     * @extends {Node}\n     */\n    constructor(value) {\n      super();\n      this.value = value;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isConstantNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var value = this.value;\n      return function evalConstantNode() {\n        return value;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {// nothing to do, we don't have any children\n    }\n    /**\n     * Create a new ConstantNode with children produced by the given callback.\n     * Trivial because there are no children.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ConstantNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      return this.clone();\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ConstantNode}\n     */\n\n\n    clone() {\n      return new ConstantNode(this.value);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      return format(this.value, options);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var value = this._toString(options);\n\n      switch (typeOf(this.value)) {\n        case 'number':\n        case 'BigNumber':\n        case 'Fraction':\n          return '<span class=\"math-number\">' + value + '</span>';\n\n        case 'string':\n          return '<span class=\"math-string\">' + value + '</span>';\n\n        case 'boolean':\n          return '<span class=\"math-boolean\">' + value + '</span>';\n\n        case 'null':\n          return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n        case 'undefined':\n          return '<span class=\"math-undefined\">' + value + '</span>';\n\n        default:\n          return '<span class=\"math-symbol\">' + value + '</span>';\n      }\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        value: this.value\n      };\n    }\n    /**\n     * Instantiate a ConstantNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n     *                       where mathjs is optional\n     * @returns {ConstantNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ConstantNode(json.value);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var value = this._toString(options);\n\n      switch (typeOf(this.value)) {\n        case 'string':\n          return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n        case 'number':\n        case 'BigNumber':\n          {\n            if (!isFinite(this.value)) {\n              return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n            }\n\n            var index = value.toLowerCase().indexOf('e');\n\n            if (index !== -1) {\n              return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n            }\n          }\n          return value;\n\n        case 'Fraction':\n          return this.value.toLatex();\n\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  _defineProperty(ConstantNode, \"name\", name);\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}