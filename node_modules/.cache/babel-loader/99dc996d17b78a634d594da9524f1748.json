{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      zeros = _ref.zeros,\n      BigNumber = _ref.BigNumber,\n      DenseMatrix = _ref.DenseMatrix;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed: typed,\n    DenseMatrix: DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed: typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(function (self) {\n      return function (x) {\n        return deepMap(x, self, true);\n      };\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return matAlgo11xS0s(x, y, self, false);\n      };\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        return matAlgo14xDs(x, y, self, false);\n      };\n    }),\n    'Array, number | BigNumber': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar is zero\n        if (equalScalar(x, 0)) {\n          // do not execute algorithm, result will be a zero matrix\n          return zeros(y.size(), y.storage());\n        }\n\n        return matAlgo12xSfs(y, x, self, true);\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // check scalar is zero\n        if (equalScalar(x, 0)) {\n          // do not execute algorithm, result will be a zero matrix\n          return zeros(y.size(), y.storage());\n        }\n\n        return matAlgo14xDs(y, x, self, true);\n      };\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(function (self) {\n      return function (x, y) {\n        // use matrix implementation\n        return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n      };\n    })\n  });\n});","map":{"version":3,"names":["factory","deepMap","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatAlgo14xDs","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","matAlgo11xS0s","matAlgo12xSfs","matAlgo14xDs","number","numberBigNumber","x","n","isInteger","TypeError","toDecimalPlaces","toNumber","Complex","round","ComplexNumber","ComplexBigNumber","_n","BigNumberBigNumber","Fraction","FractionNumber","FractionBigNumber","referToSelf","self","y","valueOf","size","storage"],"sources":["/workspaces/Calculator-React/node_modules/mathjs/lib/esm/function/arithmetic/round.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed(name, {\n    number: roundNumber,\n    'number, number': roundNumber,\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n.toNumber());\n    },\n    // deep map collection, skip zeros since round(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, self, false).valueOf();\n    }),\n    'number | Complex | BigNumber | Fraction, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo12xSfs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'number | Complex | BigNumber | Fraction, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    })\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}